#!/usr/bin/env python3
# coding: utf-8
# pypodget - a consise tool to download podcasts from rss-feeds
# Copyright (C) 2022 Martin Koehler
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import requests
import xml.etree.ElementTree as ElementTree
import unicodedata
from datetime import datetime
import os.path
import os
import sys
import tqdm
import configparser
from string import Template
import argparse
import eyed3

from pypodget import pod_download, set_verbose

# Default Settings
DEFAULT_FILENAME_TEMPLATE = "$year-$month-$day - $title.$ext"


# Download a file from the Web
def download_file(url, filename=False, verbose = True):
    if not filename:
        local_filename = os.path.join(".",url.split('/')[-1])
    else:
        local_filename = filename

    r = requests.get(url, stream=verbose, allow_redirects=True)

    if verbose:
        file_size = int(r.headers['Content-Length'])
        chunk = 1
        chunk_size=1024
        num_bars = int(file_size / chunk_size)

        with open(local_filename, 'wb') as fp:
            for chunk in tqdm.tqdm(
                                    r.iter_content(chunk_size=chunk_size)
                                    , total= num_bars
                                    , unit = 'KB'
                                    , desc = local_filename
                                    , leave = True # progressbar stays
                                ):
                fp.write(chunk)
    else:
        open(local_filename, 'wb').write(r.content)
    return


def podcast(url, folder = "./", template_name = "$year-$month-$day - $title.$ext", verbose = True):
    try:
        r = requests.get(url)
    except:
        print("Failed to obtain podcast from {}".format(url))
        return

    try:
        feed = ElementTree.fromstring(r.content)
    except Exception as err:
        print (err)
        return
    feed_title = feed.findall('channel/title')[0].text

    for feed_item in feed.iter("item"):
        title = feed_item.find("title").text
        data_url = feed_item.find("enclosure").attrib["url"]
        date_input = datetime.strptime(feed_item.find("pubDate").text, '%a, %d %b %Y %H:%M:%S %z')
        title_unicode = unicodedata.normalize('NFKD', title).encode('ascii','ignore').decode("utf-8").replace('\'','').replace('!','')

        tmp_fn = Template(template_name)
        ext = (data_url.split('?')[0]).split('.')[-1]

        filename = tmp_fn.substitute(year = "{:04}".format(date_input.year), month = "{:02}".format(date_input.month),
                                     day = "{:02}".format(date_input.day),
                                     minute = "{:02}".format(date_input.minute),
                                     hour = "{:02}".format(date_input.hour),
                                     title = title_unicode,
                                     ext = ext)
        filename = folder + os.sep + filename
        if not os.path.isfile(filename):
            try:
                pod_download(url = data_url, filename = filename)
                audiofile = eyed3.load(filename)
                if not audiofile.tag.artist:
                    audiofile.tag.artist = feed_title
                if not audiofile.tag.title:
                    audiofile.tag.title  = title
                audiofile.tag.save()
            except Exception as err:
                print("Something wrong... in the neighbor hood.")
                print (err)
                if os.path.isfile(filename):
                    os.remove(filename)
            except KeyboardInterrupt:
                print('Interrupted')
                if os.path.isfile(filename):
                    os.remove(filename)
                try:
                    sys.exit(0)
                except SystemExit:
                    os._exit(0)

def main():

    # Parse the command line
    parser = argparse.ArgumentParser(description='Download Podcasts from RSS Feeds.')
    parser.add_argument('--config', '-c', nargs = 1, required=True, help = 'Specify the configfile')
    parser.add_argument('--silent', '-s', action = 'store_true', default = False, help = 'Silent operation')
    parser.add_argument('--version', '-v',  action='version', version='%(prog)s 0.1')
    args = parser.parse_args()

    global verbose
    verbose = not args.silent
    set_verbose(verbose)

    configfile = args.config[0]

    if not os.path.isfile(configfile):
        print ('Failed to open configfile {:s}'.format(configfile))
        sys.exit(-1)



    # Read the configfile
    config = configparser.ConfigParser()
    config.read(configfile)


    for pod in config.sections():
        if pod == "settings":
            continue

        try:
            url = config[pod]["url"]
            directory = config[pod]["directory"]
        except Exception as err:
            print("Mandatory key missing")
            print(err)

        if "filename" in config[pod]:
            filename_template = config[pod]["filename"]
        else:
            filename_template = DEFAULT_FILENAME_TEMPLATE

        try:
            os.makedirs(directory, exist_ok = True)
            podcast(url, directory, filename_template, verbose)
        except Exception as err:
            print(err)


if __name__ == "__main__":
    main()
